<html>
  <head>
    <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.css">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css">
  </head>
  <body>
    <div class="container" style="margin-top: 30px">
      <div class="row">
        <div class="column column-33 column-offset-33">
          <h3>Bob, The Builder</h3>
        </div>
      </div>
      <div class="row">
        <div class="column column-33 column-offset-33">
          <h6>Compiles Go repositories on the fly!</h6>
        </div>
      </div>
      <div class="row">
        <div class="column column-33 column-offset-33">
          <form id="form">
            <fieldset>
              <label for="urlField">Repository URL</label>
              <input type="text" placeholder="https://github.com/Manzanit0/golarm" id="urlField">
              <label for="entryPointField">Entry point</label>
              <input type="text" placeholder="cmd/main.go" id="entryPointField">
              <div class="row">
                  <div class="column column-50">
                      <label for="targetOSSelect">Target OS</label>
                      <select id="targetOSSelect">
                          <option value="darwin">darwin</option>
                          <option value="dragonfly">dragonfly</option>
                          <option value="freebsd">freebsd</option>
                          <option value="linux">linux</option>
                          <option value="nacl">nacl</option>
                          <option value="netbsd">netbsd</option>
                          <option value="openbsd">openbsd</option>
                          <option value="plan9">plan9</option>
                          <option value="solaris">solaris</option>
                          <option value="windows">windows</option>
                      </select>
                  </div>
                  <div class="column column-50">
                      <label for="targetArchSelect">Target Arch</label>
                      <select id="targetArchSelect">
                          <option value="386">386</option>
                          <option value="amd64">amd64</option>
                          <option value="amd64p32">amd64p32</option>
                          <option value="arm">arm</option>
                          <option value="arm64">arm64</option>
                          <option value="ppc64">ppc64</option>
                          <option value="ppc64le">ppc64le</option>
                          <option value="mips">mips</option>
                          <option value="mipsle">mipsle</option>
                          <option value="mips64">mips64</option>
                          <option value="mips64le">mips64le</option>
                          <option value="s390x">s390x</option>
                      </select>
                  </div>
              </div>
              <input class="button-primary" type="submit" value="Build">
            </fieldset>
          </form>
        </div>
      </div>
    </div>
    <script>
      function requestCompilation(event) {
        event.preventDefault()

        const repositoryUrl = document.getElementById("urlField").value;
        const entryPoint = document.getElementById("entryPointField").value;
        const targetOS = document.getElementById("targetOSSelect").value;
        const targetArch = document.getElementById("targetArchSelect").value;

        var xhr = new XMLHttpRequest();
        xhr.open("POST", "https://builder-bob.herokuapp.com/build", true); // TODO make this env dependant
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.responseType = "arraybuffer";

        // Thank you StackOverflow:
        // https://stackoverflow.com/questions/16086162/handle-file-download-from-ajax-post
        xhr.onload = function () {
            if (this.status === 200) {
                var filename = "";
                var disposition = xhr.getResponseHeader('Content-Disposition');
                if (disposition && disposition.indexOf('attachment') !== -1) {
                    var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                    var matches = filenameRegex.exec(disposition);
                    if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                }
                var type = xhr.getResponseHeader('Content-Type');

                var blob;
                if (typeof File === 'function') {
                    try {
                        blob = new File([this.response], filename, { type: type });
                    } catch (e) { /* Edge */ }
                }
                if (typeof blob === 'undefined') {
                    blob = new Blob([this.response], { type: type });
                }

                if (typeof window.navigator.msSaveBlob !== 'undefined') {
                    // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
                    window.navigator.msSaveBlob(blob, filename);
                } else {
                    var URL = window.URL || window.webkitURL;
                    var downloadUrl = URL.createObjectURL(blob);

                    if (filename) {
                        // use HTML5 a[download] attribute to specify filename
                        var a = document.createElement("a");
                        // safari doesn't support this yet
                        if (typeof a.download === 'undefined') {
                            window.location = downloadUrl;
                        } else {
                            a.href = downloadUrl;
                            a.download = filename;
                            document.body.appendChild(a);
                            a.click();
                        }
                    } else {
                        window.location = downloadUrl;
                    }

                    setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup
                }
            }
        };

        var data = JSON.stringify({"url": repositoryUrl, "entry_point": entryPoint, "target_os": targetOS, "target_arch": targetArch});
        xhr.send(data)
        return false;
      }

      var form = document.getElementById("form");
      form.addEventListener('submit', requestCompilation);
    </script>
  </body>
</html>
